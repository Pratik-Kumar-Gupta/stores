{"version":3,"sources":["components/navbar.jsx","components/homeComp.jsx","components/desComp.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","count","Fragment","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","this","props","totalcounters","Component","HomeComp","imageUrl","styles","width","shopping_items","value","console","log","map","items","src","alt","style","p_name","onClick","onIncrement","DesComp","App","handleIncrement","counter","index","indexOf","setState","filter","c","length","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6364cfbb.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Navbar extends Component {\n  state = {\n    count: 0,\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <nav className=\"navbar navbar-expand-lg bg-dark navbar-dark\">\n          <a className=\"navbar-brand\" href=\"#\">\n            Pratik Gupta\n          </a>\n          <button\n            className=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarTogglerDemo02\"\n            aria-controls=\"navbarTogglerDemo02\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n            <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n              <li className=\"nav-item active\">\n                <a className=\"nav-link\" href=\"#\">\n                  Home <span className=\"sr-only\">(current)</span>\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"#\"></a>\n              </li>\n            </ul>\n            <form className=\"form-inline my-2 my-lg-0\">\n              {/* <input\n                className=\"form-control mr-sm-2\"\n                type=\"search\"\n                placeholder=\"Search\"\n              /> */}\n              <button\n                className=\"btn btn-outline-success my-2 my-sm-0 m-2\"\n                type=\"submit\"\n              >\n                Cart Items Count\n              </button>\n              <span className=\"badge badge-warning\">\n                {this.props.totalcounters}\n              </span>\n            </form>\n          </div>\n        </nav>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\n\nclass HomeComp extends Component {\n  state = {\n    imageUrl: \"https://picsum.photos/200\",\n    count: 0,\n  };\n  styles = {\n    width: \"100%\",\n  };\n  quantity() {\n    return this.props.shopping_items.value == 0\n      ? \"Zero\"\n      : this.props.shopping_items.value;\n  }\n  render() {\n    console.log(this.props.shopping_items);\n    return (\n      <React.Fragment>\n        <h2>Painting Gallery</h2>\n        <div className=\"row\">\n          {this.props.shopping_items.map((items) => (\n            <div className=\"col-md-3 card\">\n              <img\n                className=\"card-img-top\"\n                src={items.imageUrl}\n                alt=\"item image\"\n                style={this.styles}\n              />\n              <div className=\"card-body\">\n                <h4 className=\"card-title\">{items.p_name}</h4>\n                <p className=\"card-text\">\n                  Some example text some example text. John Doe is an architect\n                  and engineer\n                </p>\n                <button\n                  className=\"btn btn-primary m-2\"\n                  onClick={() => this.props.onIncrement(items)}\n                >\n                  Add Item\n                </button>\n                <button className=\"btn btn-danger m-2\">Delete Item</button>\n                <span className=\"badge badge-warning\">Qty : {items.value}</span>\n              </div>\n            </div>\n          ))}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default HomeComp;\n","import React, { Component } from \"react\";\n\nclass DesComp extends Component {\n  state = {};\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"jumbotron\">\n          <h1>Simple React App</h1>\n          <p>This App demonstrates a simple cart functionality</p>\n          <li>\n            Clicking on Add item will increment the qty in qty span as well as\n            navbar\n          </li>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default DesComp;\n","import React, { Component } from \"react\";\nimport Navbar from \"./components/navbar\";\nimport HomeComp from \"./components/homeComp\";\nimport DesComp from \"./components/desComp\";\n\nclass App extends Component {\n  state = {\n    shopping_items: [\n      {\n        id: 1,\n        value: 0,\n        p_name: \"Painting 1\",\n        imageUrl: \"https://picsum.photos/200\",\n      },\n      {\n        id: 2,\n        value: 0,\n        p_name: \"Painting 2\",\n        imageUrl: \"https://picsum.photos/200\",\n      },\n      {\n        id: 3,\n        value: 0,\n        p_name: \"Painting 3\",\n        imageUrl: \"https://picsum.photos/200\",\n      },\n      {\n        id: 4,\n        value: 0,\n        p_name: \"Painting 4\",\n        imageUrl: \"https://picsum.photos/200\",\n      },\n    ],\n  };\n  handleIncrement = (counter) => {\n    const shopping_items = [...this.state.shopping_items];\n    const index = shopping_items.indexOf(counter);\n    shopping_items[index] = { ...counter };\n    shopping_items[index].value++;\n    console.log(this.state.shopping_items[index]);\n    this.setState({ shopping_items });\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar\n          totalcounters={\n            this.state.shopping_items.filter((c) => c.value > 0).length\n          }\n        />\n        <div className=\"container-fluid\" style={{ marginTop: \"30px\" }}>\n          <div className=\"col-sm-12\">\n            <HomeComp\n              shopping_items={this.state.shopping_items}\n              onIncrement={this.handleIncrement}\n            />\n          </div>\n        </div>\n        <DesComp />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}