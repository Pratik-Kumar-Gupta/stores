{"version":3,"sources":["components/navbar.jsx","components/homeComp.jsx","App.js","serviceWorker.js","index.js"],"names":["Navbar","state","Fragment","className","href","class","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","placeholder","Component","HomeComp","styles","height","background","style","this","App","marginTop","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qMAuDeA,E,4MApDbC,MAAQ,G,uDAEN,OACE,kBAAC,IAAMC,SAAP,KACE,yBAAKC,UAAU,+CACb,uBAAGA,UAAU,eAAeC,KAAK,KAAjC,gBAGA,4BACEC,MAAM,iBACNC,KAAK,SACLC,cAAY,WACZC,cAAY,uBACZC,gBAAc,sBACdC,gBAAc,QACdC,aAAW,qBAEX,0BAAMR,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BS,GAAG,uBAC3C,wBAAIT,UAAU,mCACZ,wBAAIA,UAAU,mBACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,QACO,0BAAMD,UAAU,WAAhB,eAGT,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,YAKJ,0BAAMC,MAAM,4BACV,2BACEF,UAAU,uBACVG,KAAK,SACLO,YAAY,WAEd,4BACEV,UAAU,uCACVG,KAAK,UAFP,kB,GAvCOQ,aC2CNC,E,4MA1Cbd,MAAQ,G,EACRe,OAAS,CACPC,OAAQ,QACRC,WAAY,Q,uDAGZ,OACE,kBAAC,IAAMhB,SAAP,KACE,4CACA,4CACA,yBAAKiB,MAAOC,KAAKJ,QAAjB,eACA,6FACA,0CACA,yDACA,wBAAIb,UAAU,6BACZ,wBAAIA,UAAU,YACZ,uBAAGA,UAAU,kBAAkBC,KAAK,KAApC,WAIF,wBAAID,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,SAIF,wBAAID,UAAU,YACZ,uBAAGA,UAAU,WAAWC,KAAK,KAA7B,SAIF,wBAAID,UAAU,YACZ,uBAAGA,UAAU,oBAAoBC,KAAK,KAAtC,cAKJ,wBAAID,UAAU,mB,GArCCW,aCkBRO,E,4MAfbpB,MAAQ,G,uDAEN,OACE,kBAAC,IAAMC,SAAP,KACE,kBAAC,EAAD,MACA,yBAAKC,UAAU,kBAAkBgB,MAAO,CAAEG,UAAW,SACnD,yBAAKnB,UAAU,YACb,kBAAC,EAAD,a,GARMW,aCQES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5f7b526f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Navbar extends Component {\n  state = {};\n  render() {\n    return (\n      <React.Fragment>\n        <nav className=\"navbar navbar-expand-lg bg-dark navbar-dark\">\n          <a className=\"navbar-brand\" href=\"#\">\n            Gupta Stores\n          </a>\n          <button\n            class=\"navbar-toggler\"\n            type=\"button\"\n            data-toggle=\"collapse\"\n            data-target=\"#navbarTogglerDemo02\"\n            aria-controls=\"navbarTogglerDemo02\"\n            aria-expanded=\"false\"\n            aria-label=\"Toggle navigation\"\n          >\n            <span className=\"navbar-toggler-icon\"></span>\n          </button>\n          <div className=\"collapse navbar-collapse\" id=\"navbarTogglerDemo02\">\n            <ul className=\"navbar-nav mr-auto mt-2 mt-lg-0\">\n              <li className=\"nav-item active\">\n                <a className=\"nav-link\" href=\"#\">\n                  Home <span className=\"sr-only\">(current)</span>\n                </a>\n              </li>\n              <li className=\"nav-item\">\n                <a className=\"nav-link\" href=\"#\">\n                  Orders\n                </a>\n              </li>\n            </ul>\n            <form class=\"form-inline my-2 my-lg-0\">\n              <input\n                className=\"form-control mr-sm-2\"\n                type=\"search\"\n                placeholder=\"Search\"\n              />\n              <button\n                className=\"btn btn-outline-success my-2 my-sm-0\"\n                type=\"submit\"\n              >\n                Search\n              </button>\n            </form>\n          </div>\n        </nav>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Navbar;\n","import React, { Component } from \"react\";\n\nclass HomeComp extends Component {\n  state = {};\n  styles = {\n    height: \"200px\",\n    background: \"#aaa\",\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <h2>Pratik Gupta</h2>\n        <h5>Photo of me:</h5>\n        <div style={this.styles}>Profile Pic</div>\n        <p>Some text about me in culpa qui officia deserunt mollit anim..</p>\n        <h3>Some Links</h3>\n        <p>Lorem ipsum dolor sit ame.</p>\n        <ul className=\"nav nav-pills flex-column\">\n          <li className=\"nav-item\">\n            <a className=\"nav-link active\" href=\"#\">\n              Active\n            </a>\n          </li>\n          <li className=\"nav-item\">\n            <a className=\"nav-link\" href=\"#\">\n              Link\n            </a>\n          </li>\n          <li className=\"nav-item\">\n            <a className=\"nav-link\" href=\"#\">\n              Link\n            </a>\n          </li>\n          <li className=\"nav-item\">\n            <a className=\"nav-link disabled\" href=\"#\">\n              Disabled\n            </a>\n          </li>\n        </ul>\n        <hr className=\"d-sm-none\" />\n      </React.Fragment>\n    );\n  }\n}\n\nexport default HomeComp;\n","import React, { Component } from \"react\";\nimport Navbar from \"./components/navbar\";\nimport HomeComp from \"./components/homeComp\";\n\nclass App extends Component {\n  state = {};\n  render() {\n    return (\n      <React.Fragment>\n        <Navbar />\n        <div className=\"container-fluid\" style={{ marginTop: \"30px\" }}>\n          <div className=\"col-sm-3\">\n            <HomeComp />\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}